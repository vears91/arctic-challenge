doctype html
html
  link(href='/css/bootstrap.min.css', rel='stylesheet')
  // include three.js
  script(src='components/three.js/build/three.js')
  script(src='components/three.js/examples/js/libs/stats.min.js')
  // include js-aruco
  script(src='components/threex.webar/vendor/js-aruco/svd.js')
  script(src='components/threex.webar/vendor/js-aruco/posit1-patched.js')
  script(src='components/threex.webar/vendor/js-aruco/cv.js')
  script(src='components/threex.webar/vendor/js-aruco/aruco.js')
  // include some extensions
  script(src='components/threex.webar/threex.webcamgrabbing.js')
  script(src='components/threex.webar/threex.imagegrabbing.js')
  script(src='components/threex.webar/threex.videograbbing.js')
  script(src='components/threex.webar/threex.jsarucomarker.js')
  script(src='components/dom-to-image/dist/dom-to-image.min.js')
  script(src='js/jquery.js')
  body(style='margin: 0px; overflow: hidden;')
    div.row
      div.col-md-8
        #info(style='position:absolute, right: 0, bottom: 0, width: auto; height: auto; font-family:arial; font-weight: bolder; padding-top: 5px; text-align:center;')
          div
            a.webcam(href='javascript:void();') 
            |  -
            a.image(href='javascript:void();') 
            |  -
            a.video(href='javascript:void();') 
      div.col-md-4
        div#data

        div
          h2 What computer vision sees
          div#debugData

    script.

      //////////////////////////////////////////////////////////////////////////////////
      //		Test if the browser support WebGL and getUserMedia
      //////////////////////////////////////////////////////////////////////////////////
      ;(function(){
      // TODO backport those 2 in Detector.js
      var hasGetUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia) ? true : false
      var hasMediaStreamTrackSources = MediaStreamTrack.getSources ? true : false
      var hasWebGL = ( function () { try { var canvas = document.createElement( 'canvas' ); return !! ( window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ) ); } catch ( e ) { return false; } } )()
      if( hasWebGL === false ){
      alert('browser not supported');
      }
      if( hasMediaStreamTrackSources === false ){
      alert('getSources not supported');
      }
      if( hasGetUserMedia === false ){
      alert('getUserMedia not supported');
      }
      })()
      //////////////////////////////////////////////////////////////////////////////////
      //		enabled/disable various parts
      //////////////////////////////////////////////////////////////////////////////////
      var gotImage = false
      var detectMarkersEnabled	= true
      var markerToObject3DEnabled	= true
      var webglRenderEnabled		= true
      var lang = "#{lang}";
      var debug = true;

      jQuery.support.cors = true

      var changeDebug = function() {
        if (debug)
          debug = false;
        else
          debug = true;
      }
      /**
      */
      var cap = function() {
          var localElement  = document.getElementById('webc')
          var canvas = document.createElement('canvas');
          canvas.width = 640;
          canvas.height = 480;
          var ctx = canvas.getContext('2d');
          ctx.drawImage(localElement, 0, 0, canvas.width, canvas.height);

          var dataURI = canvas.toDataURL('image/png');
          var base64ImageContent = dataURI .replace(/^data:image\/(png|jpg|jpeg);base64,/, "");

          jQuery.ajax({
              type: 'POST',
              url: 'https://api',
              crossDomain: true,
              data: {img_data: base64ImageContent, lang: lang},
              contentType: "application/x-www-form-urlencoded",
              success: function(responseData, textStatus, jqXHR) {
                  console.log(responseData);
                  console.log(debug);
                  if (debug) {
                    jQuery('#debugData').html(JSON.stringify(responseData.debugInfo, null, '\t')).show();
                  }
                  if (true) {
                    console.log("got it");
                    jQuery('#data').html("<h2>What is this?</h2><p>" + responseData.data.description + "</p><p>"+responseData.translation + "</p>" + "<h2>Location</h2><p>" + responseData.data.gps_location + "</p>" + '<h2>Learn more</h2><p><a href="' + responseData.data.website + '">Website</a></p>').show();;
                  }
              },
              error: function (responseData, textStatus, errorThrown) {
                  console.log('POST failed.');
              }
          })
      }

      /**
      * Send capture for analysis every 3 seconds
      */
      var t=setInterval(cap,3000);

      detectMarkersEnabled = true;
      markerToObject3DEnabled = true;
      webglRenderEnabled = true;

      //////////////////////////////////////////////////////////////////////////////////
      //		init Stats for detectMarkers
      //////////////////////////////////////////////////////////////////////////////////
      var detectMarkersStats = new Stats();
      detectMarkersStats.setMode( 1 );
      document.body.appendChild( detectMarkersStats.domElement );
      detectMarkersStats.domElement.style.position = 'absolute'
      detectMarkersStats.domElement.style.bottom = '0px'
      detectMarkersStats.domElement.style.right = '0px'
      var renderStats = new Stats();
      renderStats.setMode( 0 );
      document.body.appendChild( renderStats.domElement );
      renderStats.domElement.style.position = 'absolute'
      renderStats.domElement.style.bottom = '0px'
      renderStats.domElement.style.left = '0px'
      //////////////////////////////////////////////////////////////////////////////////
      //		Handle ui button
      //////////////////////////////////////////////////////////////////////////////////
      document.querySelector('#info .webcam').addEventListener('click', function(event){
      location.hash	= '#webcam'
      location.reload()
      })
      document.querySelector('#info .image').addEventListener('click', function(event){
      location.hash	= '#image'
      location.reload()
      })
      document.querySelector('#info .video').addEventListener('click', function(event){
      location.hash	= '#video'
      location.reload()
      })
      //////////////////////////////////////////////////////////////////////////////////
      //		Init
      //////////////////////////////////////////////////////////////////////////////////
      // init renderer
      var renderer	= new THREE.WebGLRenderer({
      antialias	: true,
      alpha		: true,
      });
      renderer.setSize( window.innerWidth, window.innerHeight );
      document.body.appendChild( renderer.domElement );
      // array of functions for the rendering loop
      var onRenderFcts = [];
      // init scene and camera
      var scene = new THREE.Scene()
      var camera	= new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.01, 1000);
      camera.position.z = 2;
      //////////////////////////////////////////////////////////////////////////////////
      //		create a markerObject3D
      //////////////////////////////////////////////////////////////////////////////////
      var markerObject3D = new THREE.Object3D()
      scene.add(markerObject3D)
      //////////////////////////////////////////////////////////////////////////////////
      //		add an object in the markerObject3D
      //////////////////////////////////////////////////////////////////////////////////
      // add some debug display
      ;(function(){
      var geometry = new THREE.PlaneGeometry(1,1,10,10)
      var material = new THREE.MeshBasicMaterial( {
      wireframe : true
      })
      var mesh = new THREE.Mesh(geometry, material);
      markerObject3D.add( mesh );
      var mesh = new THREE.AxisHelper
      markerObject3D.add( mesh );
      })()
      // add a awesome logo to the scene
      ;(function(){
      var material = new THREE.SpriteMaterial({
      map: THREE.ImageUtils.loadTexture( 'images/awesome.png' ),
      });
      var geometry = new THREE.BoxGeometry(1,1,1)
      var object3d = new THREE.Sprite(material );
      object3d.scale.set( 2, 2, 1 );
      markerObject3D.add(object3d)
      })()
      //////////////////////////////////////////////////////////////////////////////////
      //		render the whole thing on the page
      //////////////////////////////////////////////////////////////////////////////////
      // handle window resize
      window.addEventListener('resize', function(){
      renderer.setSize( window.innerWidth, window.innerHeight )
      camera.aspect	= window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      }, false)
      // render the scene
      onRenderFcts.push(function(){
      renderStats.begin();
      if( webglRenderEnabled === true ){
      renderer.render( scene, camera );
      }
      renderStats.end();
      })
      // run the rendering loop
      var previousTime = performance.now()
      requestAnimationFrame(function animate(now){
      requestAnimationFrame( animate );
      onRenderFcts.forEach(function(onRenderFct){
      onRenderFct(now, now - previousTime)
      })
      previousTime	= now
      })
      //////////////////////////////////////////////////////////////////////////////////
      //		Do the Augmented Reality part
      //////////////////////////////////////////////////////////////////////////////////
      // init the marker recognition
      var jsArucoMarker	= new THREEx.JsArucoMarker()
      // if no specific image source is specified, take the webcam by default
      if( location.hash === '' )	location.hash = '#webcam'
      // init the image source grabbing
      if( location.hash === '#video' ){
      var videoGrabbing = new THREEx.VideoGrabbing()
      jsArucoMarker.videoScaleDown = 2
      }else if( location.hash === '#webcam' ){
      var videoGrabbing = new THREEx.WebcamGrabbing()
      jsArucoMarker.videoScaleDown = 2
      }else if( location.hash === '#image' ){
      var videoGrabbing = new THREEx.ImageGrabbing()
      jsArucoMarker.videoScaleDown = 10
      }else console.assert(false)
      // attach the videoGrabbing.domElement to the body
      document.body.appendChild(videoGrabbing.domElement)
      //////////////////////////////////////////////////////////////////////////////////
      //		Process video source to find markers
      //////////////////////////////////////////////////////////////////////////////////
      // set the markerObject3D as visible
      markerObject3D.visible	= false
      // process the image source with the marker recognition
      onRenderFcts.push(function(){
      if( detectMarkersEnabled === false )	return
      var domElement	= videoGrabbing.domElement

      detectMarkersStats.begin();
      var markers	= jsArucoMarker.detectMarkers(domElement)
      detectMarkersStats.end();
      if( markerToObject3DEnabled === false )	return
      markerObject3D.visible = false
      // see if this.markerId has been found
      markers.forEach(function(marker){
      // if( marker.id !== 265 )	return
      jsArucoMarker.markerToObject3D(marker, markerObject3D)
      markerObject3D.visible = true
      })
      })
